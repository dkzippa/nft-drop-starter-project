{"version":3,"sources":["CandyMachine/index.js","CountdownTimer/index.js","App.js","index.js","CandyMachine/helpers.js"],"names":["programs","metadata","Metadata","MetadataProgram","config","web3","PublicKey","process","SystemProgram","opts","CandyMachine","walletAddress","useState","machineStats","setMachineStats","mints","setMints","isMinting","setIsMinting","isLoadingMints","setIsLoadingMints","fetchHashTable","hash","metadataEnabled","a","connection","Connection","getProgramAccounts","filters","memcmp","offset","bytes","metadataAccounts","mintHashes","index","length","account","getParsedAccountInfo","pubkey","accountInfo","toString","value","push","data","mint","getMetadata","findProgramAddress","Buffer","from","TOKEN_METADATA_PROGRAM_ID","toBuffer","getMasterEdition","getTokenWallet","wallet","TOKEN_PROGRAM_ID","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","mintToken","Keypair","generate","publicKey","token","masterEdition","getMinimumBalanceForRentExemption","MintLayout","span","rent","accounts","candyMachine","payer","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","programId","SYSVAR_RENT_PUBKEY","clock","SYSVAR_CLOCK_PUBKEY","signers","instructions","createAccount","fromPubkey","newAccountPubkey","space","lamports","Token","createInitMintInstruction","createAssociatedTokenAccountInstruction","createMintToInstruction","provider","getProvider","Program","fetchIdl","candyMachineProgram","idl","program","rpc","mintNft","txn","console","log","onSignatureWithOptions","notification","context","type","result","err","getCandyMachineState","commitment","message","msg","code","indexOf","warn","associatedTokenAddress","splTokenMintAddress","keys","isSigner","isWritable","TransactionInstruction","Provider","window","solana","fetch","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","goLiveData","goLiveDate","goLiveDateTimeString","Date","toGMTString","uri","response","json","parse","find","image","prevState","useEffect","className","onClick","disabled","map","href","target","rel","src","alt","CountdownTimer","timerString","setTimerString","currentDate","dropDate1","interval","setInterval","getTime","distance","days","Math","floor","hours","minutes","seconds","clearInterval","TWITTER_HANDLE","TWITTER_LINK","App","setWalletAddress","checkIfWalletIsConnected","isPhantom","connect","onlyIfTrusted","alert","error","connectWallet","onLoad","addEventListener","removeEventListener","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.84ceaa61.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport { programs } from '@metaplex/js';\nimport './CandyMachine.css';\nimport {\n  candyMachineProgram,\n  TOKEN_METADATA_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from './helpers';\n\nimport CountdownTimer from '../CountdownTimer';\n\n\nconst {\n  metadata: { Metadata, MetadataProgram },\n} = programs;\n\nconst config = new web3.PublicKey(process.env.REACT_APP_CANDY_MACHINE_CONFIG);\nconst { SystemProgram } = web3;\nconst opts = {\n  preflightCommitment: 'processed',\n};\n\nconst MAX_NAME_LENGTH = 32;\nconst MAX_URI_LENGTH = 200;\nconst MAX_SYMBOL_LENGTH = 10;\nconst MAX_CREATOR_LEN = 32 + 1 + 1;\n\nconst CandyMachine = ({ walletAddress }) => {\n\n  const [machineStats, setMachineStats] = useState(null);\n  const [mints, setMints] = useState([]);\n\n  const [isMinting, setIsMinting] = useState(false);\n  const [isLoadingMints, setIsLoadingMints] = useState(false);\n\n\n\n  // Actions\n  const fetchHashTable = async (hash, metadataEnabled) => {\n    const connection = new web3.Connection(\n      process.env.REACT_APP_SOLANA_RPC_HOST\n    );\n\n\n\n    const metadataAccounts = await MetadataProgram.getProgramAccounts(\n      connection,\n      {\n        filters: [\n          {\n            memcmp: {\n              offset:\n                1 +\n                32 +\n                32 +\n                4 +\n                MAX_NAME_LENGTH +\n                4 +\n                MAX_URI_LENGTH +\n                4 +\n                MAX_SYMBOL_LENGTH +\n                2 +\n                1 +\n                4 +\n                0 * MAX_CREATOR_LEN,\n              bytes: hash,\n            },\n          },\n        ],\n      }\n    );\n\n    const mintHashes = [];\n\n    for (let index = 0; index < metadataAccounts.length; index++) {\n      const account = metadataAccounts[index];\n      const accountInfo = await connection.getParsedAccountInfo(account.pubkey);\n      const metadata = new Metadata(hash.toString(), accountInfo.value);\n      if (metadataEnabled) mintHashes.push(metadata.data);\n      else mintHashes.push(metadata.data.mint);\n    }\n\n    return mintHashes;\n  };\n\n  const getMetadata = async (mint) => {\n    return (\n      await PublicKey.findProgramAddress(\n        [\n          Buffer.from('metadata'),\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n          mint.toBuffer(),\n        ],\n        TOKEN_METADATA_PROGRAM_ID\n      )\n    )[0];\n  };\n\n  const getMasterEdition = async (mint) => {\n    return (\n      await PublicKey.findProgramAddress(\n        [\n          Buffer.from('metadata'),\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n          mint.toBuffer(),\n          Buffer.from('edition'),\n        ],\n        TOKEN_METADATA_PROGRAM_ID\n      )\n    )[0];\n  };\n\n  const getTokenWallet = async (wallet, mint) => {\n    return (\n      await web3.PublicKey.findProgramAddress(\n        [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n        SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n      )\n    )[0];\n  };\n\n  const mintToken = async () => {\n    try {\n\n      setIsMinting(true);\n\n      const mint = web3.Keypair.generate();\n      const token = await getTokenWallet(\n        walletAddress.publicKey,\n        mint.publicKey\n      );\n      const metadata = await getMetadata(mint.publicKey);\n      const masterEdition = await getMasterEdition(mint.publicKey);\n      const rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST;\n      const connection = new Connection(rpcHost);\n      const rent = await connection.getMinimumBalanceForRentExemption(\n        MintLayout.span\n      );\n\n      const accounts = {\n        config,\n        candyMachine: process.env.REACT_APP_CANDY_MACHINE_ID,\n        payer: walletAddress.publicKey,\n        wallet: process.env.REACT_APP_TREASURY_ADDRESS,\n        mint: mint.publicKey,\n        metadata,\n        masterEdition,\n        mintAuthority: walletAddress.publicKey,\n        updateAuthority: walletAddress.publicKey,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: web3.SYSVAR_RENT_PUBKEY,\n        clock: web3.SYSVAR_CLOCK_PUBKEY,\n      };\n\n      const signers = [mint];\n      const instructions = [\n        web3.SystemProgram.createAccount({\n          fromPubkey: walletAddress.publicKey,\n          newAccountPubkey: mint.publicKey,\n          space: MintLayout.span,\n          lamports: rent,\n          programId: TOKEN_PROGRAM_ID,\n        }),\n        Token.createInitMintInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          0,\n          walletAddress.publicKey,\n          walletAddress.publicKey\n        ),\n        createAssociatedTokenAccountInstruction(\n          token,\n          walletAddress.publicKey,\n          walletAddress.publicKey,\n          mint.publicKey\n        ),\n        Token.createMintToInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          token,\n          walletAddress.publicKey,\n          [],\n          1\n        ),\n      ];\n\n      const provider = getProvider();\n      const idl = await Program.fetchIdl(candyMachineProgram, provider);\n      const program = new Program(idl, candyMachineProgram, provider);\n\n      const txn = await program.rpc.mintNft({\n        accounts,\n        signers,\n        instructions,\n      });\n\n      console.log('txn:', txn);\n\n      // Setup listener\n      connection.onSignatureWithOptions(\n        txn,\n        async (notification, context) => {\n          if (notification.type === 'status') {\n            console.log('Receievd status event');\n\n            const { result } = notification;\n            if (!result.err) {\n              console.log('NFT Minted!');\n              setIsMinting(false);\n              await getCandyMachineState();\n            }\n          }\n        },\n        { commitment: 'processed' }\n      );\n    } catch (error) {\n      let message = error.msg || 'Minting failed! Please try again!';\n\n      setIsMinting(false);\n\n      if (!error.msg) {\n        if (error.message.indexOf('0x138')) {\n        } else if (error.message.indexOf('0x137')) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf('0x135')) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      console.warn(message);\n    }\n  };\n\n  const createAssociatedTokenAccountInstruction = (\n    associatedTokenAddress,\n    payer,\n    walletAddress,\n    splTokenMintAddress\n  ) => {\n    const keys = [\n      { pubkey: payer, isSigner: true, isWritable: true },\n      { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n      { pubkey: walletAddress, isSigner: false, isWritable: false },\n      { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n      {\n        pubkey: web3.SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      {\n        pubkey: web3.SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n    return new web3.TransactionInstruction({\n      keys,\n      programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n      data: Buffer.from([]),\n    });\n  };\n\n\n\n\n  const getProvider = () => {\n    const rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST;\n    // Create a new connection object\n    const connection = new Connection(rpcHost);\n\n    // Create a new Solana provider object\n    const provider = new Provider(\n        connection,\n        window.solana,\n        opts.preflightCommitment\n    );\n\n    return provider;\n  };\n\n\n\n\n  const renderMintedItems = () => (\n      <div className=\"gif-container\">\n        <p className=\"sub-text\">✨ Your Minted Items: </p>\n        <div className=\"gif-grid\">\n          {mints.map((mint) => (\n              <div className=\"gif-item\" key={mint}>\n                <a href={mint} target=\"_blank\" rel=\"noreferrer\">\n                  <img src={mint} alt={`Minted NFT ${mint}`} />\n                </a>\n              </div>\n          ))}\n        </div>\n      </div>\n  );\n\n\n\n\n\n// Declare getCandyMachineState as an async method\n  const getCandyMachineState = async () => {\n    const provider = getProvider();\n\n    // Get metadata about your deployed candy machine program\n    const idl = await Program.fetchIdl(candyMachineProgram, provider);\n\n    // Create a program that you can call\n    const program = new Program(idl, candyMachineProgram, provider);\n\n    // Fetch the metadata from your candy machine\n    const candyMachine = await program.account.candyMachine.fetch(\n        process.env.REACT_APP_CANDY_MACHINE_ID\n    );\n\n    // Parse out all our metadata and log it out\n    const itemsAvailable = candyMachine.data.itemsAvailable.toNumber();\n    const itemsRedeemed = candyMachine.itemsRedeemed.toNumber();\n    const itemsRemaining = itemsAvailable - itemsRedeemed;\n    const goLiveData = candyMachine.data.goLiveDate.toNumber();\n\n    // We will be using this later in our UI so let's generate this now\n    const goLiveDateTimeString = `${new Date(\n        goLiveData * 1000\n    ).toGMTString()}`\n\n    // Add this data to your state to render\n    setMachineStats({\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      goLiveData,\n      goLiveDateTimeString,\n    });\n\n    console.log({\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      goLiveData,\n      goLiveDateTimeString,\n    });\n\n\n    setIsLoadingMints(true);\n\n    const data = await fetchHashTable(\n        process.env.REACT_APP_CANDY_MACHINE_ID,\n        true\n    );\n\n    if (data.length !== 0) {\n      for (const mint of data) {\n        // Get URI\n        const response = await fetch(mint.data.uri);\n        const parse = await response.json();\n        console.log(\"Past Minted NFT\", mint)\n\n        // Get image URI\n        if (!mints.find((mint) => mint === parse.image)) {\n          setMints((prevState) => [...prevState, parse.image]);\n        }\n      }\n    }\n\n    setIsLoadingMints(false);\n\n\n  };\n\n\n\n  useEffect(() => {\n    // eslint-disable-next-line\n    getCandyMachineState();\n    // eslint-disable-next-line\n  }, []);\n\n\n\n\n\n\n\n  return (\n      machineStats && (<div className=\"machine-container\">\n\n        <CountdownTimer goLiveData={machineStats.goLiveData * 1000} />\n\n        <p>\n          Items Minted: <span className=\"machine-drop-numbers\">{machineStats.itemsRedeemed} / {machineStats.itemsAvailable}</span>\n        </p>\n        <button className=\"cta-button mint-button\" onClick={mintToken}  disabled={isMinting}>\n          Mint NFT\n        </button>\n\n        {isLoadingMints && <p>✨ LOADING YOUR MINTED ITEMS...</p>}\n\n        {mints.length > 0 && renderMintedItems()}\n\n    </div>)\n  );\n\n\n\n};\n\nexport default CandyMachine;\n","import React, { useEffect, useState } from 'react';\nimport './CountdownTimer.css';\n\nconst CountdownTimer = ({ goLiveData }) => {\n\n    // State\n    const [timerString, setTimerString] = useState('');\n\n    // Our useEffect will run on component load\n    useEffect(() => {\n        console.log('Setting interval...');\n\n\n        // Get the current date and dropDate in a JavaScript Date object\n        const currentDate = new Date();\n        const dropDate1 = new Date(goLiveData);\n\n        // If currentDate is before dropDate, render our Countdown component\n        if (currentDate < dropDate1) {\n\n            console.log('Before drop date!');\n\n            // Use setInterval to run this piece of code every second\n            const interval = setInterval(() => {\n                const currentDate = new Date().getTime();\n                const distance = dropDate1 - currentDate;\n\n                // Here it's as easy as doing some time math to get the different properties\n                const days = Math.floor(distance / (1000 * 60 * 60 * 24));\n                const hours = Math.floor(\n                    (distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n                );\n                const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n                const seconds = Math.floor((distance % (1000 * 60)) / 1000);\n\n                // We have our desired output, set it in state!\n                setTimerString(`${days}d ${hours}h ${minutes}m ${seconds}s`);\n\n                // If our distance passes zero this means that it's drop time!\n                if (distance < 0) {\n                    console.log('Clearing interval....');\n                    clearInterval(interval);\n                }\n            }, 1000);\n\n            // Anytime our component unmounts let's clean up our interval\n            return () => {\n                if (interval) {\n                    clearInterval(interval);\n                }\n            };\n\n\n        }\n\n        return null;\n\n    }, [goLiveData]);\n\n\n    return (\n        <div className=\"timer-container\">\n            {timerString && <div><p className=\"timer-header\">Candy Drop Starting In</p><p className=\"timer-value\">{`⏰ ${timerString}`}</p></div>}\n            {!timerString && <p className=\"timer-header\">NFT DROP ALREADY STARTED</p>}\n        </div>\n    );\n};\n\nexport default CountdownTimer;\n","import React, { useEffect, useState} from \"react\";\nimport './App.css';\nimport CandyMachine from './CandyMachine';\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n\n  /*\n  * Declare your function\n  */\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n      \n\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n        \n          /*\n          * The solana object gives us a function that will allow us to connect\n          * directly with the user's wallet!\n          */\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log('Connected with Public Key:', response.publicKey.toString());\n          /*\n           * Set the user's publicKey in state to be used later!\n           */\n          setWalletAddress(response.publicKey.toString());\n                    \n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet 👻');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  \n//https://thissneakerdoesnotexist.com/editor/?seed=581&style=2\n//https://explorer.solana.com/address/4ApmBuXnLkviy24ASHF7cQmwYU1dUaUD5onq2ftv5mKr?cluster=devnet\n\n  /*\n   * Let's define this method so our code doesn't break.\n   * We will write the logic for this next!\n   */\n  const connectWallet = async () => {\n          \n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n\n\n  /*\n   * When our component first mounts, let's check to see if we have a connected\n   * Phantom Wallet\n   */\n  useEffect(() => {\n    const onLoad = async () => {\n      \n      console.log('start useEffect');\n\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n  \n  \n\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n\n          <div className=\"header-cnt\">\n\n            <p className=\"sub-text\">TOP SECRET</p>\n            <p className=\"header\">UFO PROJECTS</p>\n            <p className=\"sub-text\">DECLASSIFIED</p>\n\n            {!walletAddress && renderNotConnectedContainer()}\n          </div>\n\n        </div>\n\n        <div className=\"content-container\">\n          <div className='mint-container'>\n\n            {walletAddress && <CandyMachine walletAddress={window.solana} />}\n\n          </div>\n\n          <div className='partners-container'>\n            <p className=\"partners-header\">PARTNERS</p>\n            <img className='partner-thumb' alt='' src='images/partner1.png'/>\n            <img className='partner-thumb' alt='' src='images/partner2.png'/>\n            <img className='partner-thumb' alt='' src='images/partner3.png'/>\n            <img className='partner-thumb' alt='' src='images/partner4.png'/>\n\n          </div>\n\n          <p className=\"sub-text\">Welcome to UFO DECLASSIFIED NFT club!</p>\n          <p className=\"sub-text\">The UFO DECLASSIFIED NFT club is a NFT project created to offer continuous value to\n            its community.\n            Our first collection is a savory 6 secret UFO NFTs on the Solanium blockchain.\n            No two evidences are alike, and you'll never know what the aliens will show up!</p>\n          <div className=\"photos-container\">\n            <img className='nft-thumb' alt='' src='images/nft1.png' onClick={connectWallet}/>\n            <img className='nft-thumb' alt='' src='images/nft2.png' onClick={connectWallet}/>\n            <img className='nft-thumb' alt='' src='images/nft3.png' onClick={connectWallet}/>\n          </div>\n          <p className=\"sub-text\">It is only the beginning...\n            After this drop, the community will get to vote on what NFT collectible we uncover next.\n            Place your orders!</p>\n        </div>\n        \n        <div className=\"footer-container\">\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >@2021 UFO DECLASSIFIED NFT CLUB {`@${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import { web3 } from '@project-serum/anchor';\n\n// CLI Properties Given to us\nconst candyMachineProgram = new web3.PublicKey(\n  'cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ'\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new web3.PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'\n);\n\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new web3.PublicKey(\n  'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'\n);\nexport {\n  candyMachineProgram,\n  TOKEN_METADATA_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n};\n"],"sourceRoot":""}